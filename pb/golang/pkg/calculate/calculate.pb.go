// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: calculate.proto

package calculate

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evalint     int32   `protobuf:"varint,1,opt,name=evalint,proto3" json:"evalint,omitempty"`
	Evalfloat   float32 `protobuf:"fixed32,2,opt,name=evalfloat,proto3" json:"evalfloat,omitempty"`
	Evaldouble  float64 `protobuf:"fixed64,3,opt,name=evaldouble,proto3" json:"evaldouble,omitempty"`
	Evalbool    bool    `protobuf:"varint,4,opt,name=evalbool,proto3" json:"evalbool,omitempty"`
	Evalsint32  int32   `protobuf:"zigzag32,5,opt,name=evalsint32,proto3" json:"evalsint32,omitempty"`
	Evalunit32  uint32  `protobuf:"varint,6,opt,name=evalunit32,proto3" json:"evalunit32,omitempty"`
	Evalint64   int64   `protobuf:"varint,7,opt,name=evalint64,proto3" json:"evalint64,omitempty"`
	Evalsint64  int64   `protobuf:"zigzag64,8,opt,name=evalsint64,proto3" json:"evalsint64,omitempty"`
	Evaluint64  uint64  `protobuf:"varint,9,opt,name=evaluint64,proto3" json:"evaluint64,omitempty"`
	Evalsfix32  int32   `protobuf:"fixed32,10,opt,name=evalsfix32,proto3" json:"evalsfix32,omitempty"`
	Evalfix32   uint32  `protobuf:"fixed32,11,opt,name=evalfix32,proto3" json:"evalfix32,omitempty"`
	Evalfixed64 int64   `protobuf:"fixed64,12,opt,name=evalfixed64,proto3" json:"evalfixed64,omitempty"`
	Evalstring  string  `protobuf:"bytes,13,opt,name=evalstring,proto3" json:"evalstring,omitempty"`
	Evalbytes   []byte  `protobuf:"bytes,14,opt,name=evalbytes,proto3" json:"evalbytes,omitempty"`
	Msg         string  `protobuf:"bytes,15,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CalMessage) Reset() {
	*x = CalMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMessage) ProtoMessage() {}

func (x *CalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMessage.ProtoReflect.Descriptor instead.
func (*CalMessage) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{0}
}

func (x *CalMessage) GetEvalint() int32 {
	if x != nil {
		return x.Evalint
	}
	return 0
}

func (x *CalMessage) GetEvalfloat() float32 {
	if x != nil {
		return x.Evalfloat
	}
	return 0
}

func (x *CalMessage) GetEvaldouble() float64 {
	if x != nil {
		return x.Evaldouble
	}
	return 0
}

func (x *CalMessage) GetEvalbool() bool {
	if x != nil {
		return x.Evalbool
	}
	return false
}

func (x *CalMessage) GetEvalsint32() int32 {
	if x != nil {
		return x.Evalsint32
	}
	return 0
}

func (x *CalMessage) GetEvalunit32() uint32 {
	if x != nil {
		return x.Evalunit32
	}
	return 0
}

func (x *CalMessage) GetEvalint64() int64 {
	if x != nil {
		return x.Evalint64
	}
	return 0
}

func (x *CalMessage) GetEvalsint64() int64 {
	if x != nil {
		return x.Evalsint64
	}
	return 0
}

func (x *CalMessage) GetEvaluint64() uint64 {
	if x != nil {
		return x.Evaluint64
	}
	return 0
}

func (x *CalMessage) GetEvalsfix32() int32 {
	if x != nil {
		return x.Evalsfix32
	}
	return 0
}

func (x *CalMessage) GetEvalfix32() uint32 {
	if x != nil {
		return x.Evalfix32
	}
	return 0
}

func (x *CalMessage) GetEvalfixed64() int64 {
	if x != nil {
		return x.Evalfixed64
	}
	return 0
}

func (x *CalMessage) GetEvalstring() string {
	if x != nil {
		return x.Evalstring
	}
	return ""
}

func (x *CalMessage) GetEvalbytes() []byte {
	if x != nil {
		return x.Evalbytes
	}
	return nil
}

func (x *CalMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ExternalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evalint     int32                  `protobuf:"varint,1,opt,name=evalint,proto3" json:"evalint,omitempty"`
	Evalfloat   float32                `protobuf:"fixed32,2,opt,name=evalfloat,proto3" json:"evalfloat,omitempty"`
	Evaldouble  float64                `protobuf:"fixed64,3,opt,name=evaldouble,proto3" json:"evaldouble,omitempty"`
	Evalbool    bool                   `protobuf:"varint,4,opt,name=evalbool,proto3" json:"evalbool,omitempty"`
	Evalsint32  int32                  `protobuf:"zigzag32,5,opt,name=evalsint32,proto3" json:"evalsint32,omitempty"`
	Evalunit32  uint32                 `protobuf:"varint,6,opt,name=evalunit32,proto3" json:"evalunit32,omitempty"`
	Evalint64   int64                  `protobuf:"varint,7,opt,name=evalint64,proto3" json:"evalint64,omitempty"`
	Evalsint64  int64                  `protobuf:"zigzag64,8,opt,name=evalsint64,proto3" json:"evalsint64,omitempty"`
	Evaluint64  uint64                 `protobuf:"varint,9,opt,name=evaluint64,proto3" json:"evaluint64,omitempty"`
	Evalsfix32  int32                  `protobuf:"fixed32,10,opt,name=evalsfix32,proto3" json:"evalsfix32,omitempty"`
	Evalfix32   uint32                 `protobuf:"fixed32,11,opt,name=evalfix32,proto3" json:"evalfix32,omitempty"`
	Evalfixed64 int64                  `protobuf:"fixed64,12,opt,name=evalfixed64,proto3" json:"evalfixed64,omitempty"`
	Evalstring  string                 `protobuf:"bytes,13,opt,name=evalstring,proto3" json:"evalstring,omitempty"`
	Evalbytes   []byte                 `protobuf:"bytes,14,opt,name=evalbytes,proto3" json:"evalbytes,omitempty"`
	CallMsgs    map[string]*CalMessage `protobuf:"bytes,15,rep,name=callMsgs,proto3" json:"callMsgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalInfo) Reset() {
	*x = ExternalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalInfo) ProtoMessage() {}

func (x *ExternalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalInfo.ProtoReflect.Descriptor instead.
func (*ExternalInfo) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalInfo) GetEvalint() int32 {
	if x != nil {
		return x.Evalint
	}
	return 0
}

func (x *ExternalInfo) GetEvalfloat() float32 {
	if x != nil {
		return x.Evalfloat
	}
	return 0
}

func (x *ExternalInfo) GetEvaldouble() float64 {
	if x != nil {
		return x.Evaldouble
	}
	return 0
}

func (x *ExternalInfo) GetEvalbool() bool {
	if x != nil {
		return x.Evalbool
	}
	return false
}

func (x *ExternalInfo) GetEvalsint32() int32 {
	if x != nil {
		return x.Evalsint32
	}
	return 0
}

func (x *ExternalInfo) GetEvalunit32() uint32 {
	if x != nil {
		return x.Evalunit32
	}
	return 0
}

func (x *ExternalInfo) GetEvalint64() int64 {
	if x != nil {
		return x.Evalint64
	}
	return 0
}

func (x *ExternalInfo) GetEvalsint64() int64 {
	if x != nil {
		return x.Evalsint64
	}
	return 0
}

func (x *ExternalInfo) GetEvaluint64() uint64 {
	if x != nil {
		return x.Evaluint64
	}
	return 0
}

func (x *ExternalInfo) GetEvalsfix32() int32 {
	if x != nil {
		return x.Evalsfix32
	}
	return 0
}

func (x *ExternalInfo) GetEvalfix32() uint32 {
	if x != nil {
		return x.Evalfix32
	}
	return 0
}

func (x *ExternalInfo) GetEvalfixed64() int64 {
	if x != nil {
		return x.Evalfixed64
	}
	return 0
}

func (x *ExternalInfo) GetEvalstring() string {
	if x != nil {
		return x.Evalstring
	}
	return ""
}

func (x *ExternalInfo) GetEvalbytes() []byte {
	if x != nil {
		return x.Evalbytes
	}
	return nil
}

func (x *ExternalInfo) GetCallMsgs() map[string]*CalMessage {
	if x != nil {
		return x.CallMsgs
	}
	return nil
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element0  float32                  `protobuf:"fixed32,1,opt,name=element0,proto3" json:"element0,omitempty"`                                                                                            /// 参数1
	Element1  float32                  `protobuf:"fixed32,2,opt,name=element1,proto3" json:"element1,omitempty"`                                                                                            /// 参数2
	Msg       *CalMessage              `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`                                                                                                        /// 消息
	Externals []*ExternalInfo          `protobuf:"bytes,4,rep,name=Externals,proto3" json:"Externals,omitempty"`                                                                                            /// 附加信息
	Datelist  []float32                `protobuf:"fixed32,5,rep,packed,name=datelist,proto3" json:"datelist,omitempty"`                                                                                     /// 测试字段
	Emapstr   map[string]*ExternalInfo `protobuf:"bytes,6,rep,name=emapstr,proto3" json:"emapstr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`        /// 字典测试1
	Emapint   map[int32]*ExternalInfo  `protobuf:"bytes,7,rep,name=emapint,proto3" json:"emapint,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       /// 字典测试2
	Emadouble map[int32]float64        `protobuf:"bytes,8,rep,name=emadouble,proto3" json:"emadouble,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` /// 字典测试3
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{2}
}

func (x *AddRequest) GetElement0() float32 {
	if x != nil {
		return x.Element0
	}
	return 0
}

func (x *AddRequest) GetElement1() float32 {
	if x != nil {
		return x.Element1
	}
	return 0
}

func (x *AddRequest) GetMsg() *CalMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AddRequest) GetExternals() []*ExternalInfo {
	if x != nil {
		return x.Externals
	}
	return nil
}

func (x *AddRequest) GetDatelist() []float32 {
	if x != nil {
		return x.Datelist
	}
	return nil
}

func (x *AddRequest) GetEmapstr() map[string]*ExternalInfo {
	if x != nil {
		return x.Emapstr
	}
	return nil
}

func (x *AddRequest) GetEmapint() map[int32]*ExternalInfo {
	if x != nil {
		return x.Emapint
	}
	return nil
}

func (x *AddRequest) GetEmadouble() map[int32]float64 {
	if x != nil {
		return x.Emadouble
	}
	return nil
}

type AddRequest2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests map[string]*AddRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddRequest2) Reset() {
	*x = AddRequest2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest2) ProtoMessage() {}

func (x *AddRequest2) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest2.ProtoReflect.Descriptor instead.
func (*AddRequest2) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{3}
}

func (x *AddRequest2) GetRequests() map[string]*AddRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CalculateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Result float32 `protobuf:"fixed32,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CalculateResult) Reset() {
	*x = CalculateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateResult) ProtoMessage() {}

func (x *CalculateResult) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateResult.ProtoReflect.Descriptor instead.
func (*CalculateResult) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{4}
}

func (x *CalculateResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CalculateResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CalculateResult) GetResult() float32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GetMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"` /// message id
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       /// user id
}

func (x *GetMessageRequest) Reset() {
	*x = GetMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequest) ProtoMessage() {}

func (x *GetMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequest.ProtoReflect.Descriptor instead.
func (*GetMessageRequest) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{5}
}

func (x *GetMessageRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GetMessageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"` /// 返回的消息Id
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`       /// 返回的userId
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`           /// 消息主题
}

func (x *GetMessageResponse) Reset() {
	*x = GetMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calculate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageResponse) ProtoMessage() {}

func (x *GetMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageResponse.ProtoReflect.Descriptor instead.
func (*GetMessageResponse) Descriptor() ([]byte, []int) {
	return file_calculate_proto_rawDescGZIP(), []int{6}
}

func (x *GetMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GetMessageResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMessageResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_calculate_proto protoreflect.FileDescriptor

var file_calculate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x43,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x61,
	0x6c, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x61, 0x6c,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x61, 0x6c, 0x73, 0x66, 0x69, 0x78, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x66, 0x69, 0x78, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x76, 0x61,
	0x6c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0b,
	0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x61, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x65, 0x76, 0x61, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd5, 0x04, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x74, 0x33, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x6e, 0x69, 0x74, 0x33, 0x32,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x66, 0x69, 0x78, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0f, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x66, 0x69, 0x78, 0x33, 0x32, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x1a,
	0x52, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe8, 0x04, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x30, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x27, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x74,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6d, 0x61, 0x70, 0x73, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x61,
	0x70, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x70, 0x69,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x61,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6d, 0x61,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x53, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x70, 0x73, 0x74,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x45,
	0x6d, 0x61, 0x70, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0x40,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x1a, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x32, 0xb0, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x4f, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x32, 0x12, 0x16, 0x2e, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x32, 0xa4, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x96, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x7d, 0x5a, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x7d, 0x42, 0x23,
	0x5a, 0x21, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x3b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calculate_proto_rawDescOnce sync.Once
	file_calculate_proto_rawDescData = file_calculate_proto_rawDesc
)

func file_calculate_proto_rawDescGZIP() []byte {
	file_calculate_proto_rawDescOnce.Do(func() {
		file_calculate_proto_rawDescData = protoimpl.X.CompressGZIP(file_calculate_proto_rawDescData)
	})
	return file_calculate_proto_rawDescData
}

var file_calculate_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_calculate_proto_goTypes = []interface{}{
	(*CalMessage)(nil),         // 0: calculate.CalMessage
	(*ExternalInfo)(nil),       // 1: calculate.ExternalInfo
	(*AddRequest)(nil),         // 2: calculate.AddRequest
	(*AddRequest2)(nil),        // 3: calculate.AddRequest2
	(*CalculateResult)(nil),    // 4: calculate.CalculateResult
	(*GetMessageRequest)(nil),  // 5: calculate.GetMessageRequest
	(*GetMessageResponse)(nil), // 6: calculate.GetMessageResponse
	nil,                        // 7: calculate.ExternalInfo.CallMsgsEntry
	nil,                        // 8: calculate.AddRequest.EmapstrEntry
	nil,                        // 9: calculate.AddRequest.EmapintEntry
	nil,                        // 10: calculate.AddRequest.EmadoubleEntry
	nil,                        // 11: calculate.AddRequest2.RequestsEntry
}
var file_calculate_proto_depIdxs = []int32{
	7,  // 0: calculate.ExternalInfo.callMsgs:type_name -> calculate.ExternalInfo.CallMsgsEntry
	0,  // 1: calculate.AddRequest.msg:type_name -> calculate.CalMessage
	1,  // 2: calculate.AddRequest.Externals:type_name -> calculate.ExternalInfo
	8,  // 3: calculate.AddRequest.emapstr:type_name -> calculate.AddRequest.EmapstrEntry
	9,  // 4: calculate.AddRequest.emapint:type_name -> calculate.AddRequest.EmapintEntry
	10, // 5: calculate.AddRequest.emadouble:type_name -> calculate.AddRequest.EmadoubleEntry
	11, // 6: calculate.AddRequest2.requests:type_name -> calculate.AddRequest2.RequestsEntry
	0,  // 7: calculate.ExternalInfo.CallMsgsEntry.value:type_name -> calculate.CalMessage
	1,  // 8: calculate.AddRequest.EmapstrEntry.value:type_name -> calculate.ExternalInfo
	1,  // 9: calculate.AddRequest.EmapintEntry.value:type_name -> calculate.ExternalInfo
	2,  // 10: calculate.AddRequest2.RequestsEntry.value:type_name -> calculate.AddRequest
	2,  // 11: calculate.Calculate.Add:input_type -> calculate.AddRequest
	3,  // 12: calculate.Calculate.Add2:input_type -> calculate.AddRequest2
	5,  // 13: calculate.Messaging.GetMessage:input_type -> calculate.GetMessageRequest
	4,  // 14: calculate.Calculate.Add:output_type -> calculate.CalculateResult
	4,  // 15: calculate.Calculate.Add2:output_type -> calculate.CalculateResult
	6,  // 16: calculate.Messaging.GetMessage:output_type -> calculate.GetMessageResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_calculate_proto_init() }
func file_calculate_proto_init() {
	if File_calculate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calculate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calculate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calculate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_calculate_proto_goTypes,
		DependencyIndexes: file_calculate_proto_depIdxs,
		MessageInfos:      file_calculate_proto_msgTypes,
	}.Build()
	File_calculate_proto = out.File
	file_calculate_proto_rawDesc = nil
	file_calculate_proto_goTypes = nil
	file_calculate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculateClient is the client API for Calculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*CalculateResult, error)
	Add2(ctx context.Context, in *AddRequest2, opts ...grpc.CallOption) (*CalculateResult, error)
}

type calculateClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateClient(cc grpc.ClientConnInterface) CalculateClient {
	return &calculateClient{cc}
}

func (c *calculateClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*CalculateResult, error) {
	out := new(CalculateResult)
	err := c.cc.Invoke(ctx, "/calculate.Calculate/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateClient) Add2(ctx context.Context, in *AddRequest2, opts ...grpc.CallOption) (*CalculateResult, error) {
	out := new(CalculateResult)
	err := c.cc.Invoke(ctx, "/calculate.Calculate/Add2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateServer is the server API for Calculate service.
type CalculateServer interface {
	Add(context.Context, *AddRequest) (*CalculateResult, error)
	Add2(context.Context, *AddRequest2) (*CalculateResult, error)
}

// UnimplementedCalculateServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateServer struct {
}

func (*UnimplementedCalculateServer) Add(context.Context, *AddRequest) (*CalculateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCalculateServer) Add2(context.Context, *AddRequest2) (*CalculateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add2 not implemented")
}

func RegisterCalculateServer(s *grpc.Server, srv CalculateServer) {
	s.RegisterService(&_Calculate_serviceDesc, srv)
}

func _Calculate_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.Calculate/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculate_Add2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Add2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.Calculate/Add2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Add2(ctx, req.(*AddRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculate.Calculate",
	HandlerType: (*CalculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculate_Add_Handler,
		},
		{
			MethodName: "Add2",
			Handler:    _Calculate_Add2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculate.proto",
}

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/calculate.Messaging/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
}

// UnimplementedMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (*UnimplementedMessagingServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculate.Messaging/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculate.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _Messaging_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculate.proto",
}
